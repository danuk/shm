package Core::Identities;

use v5.14;
use parent 'Core::Base';
use Core::Base;
use File::Temp;
use Core::Utils qw(
    file_by_string
    read_file
);

sub table { return 'identities' };

sub structure {
    return {
        id => {
            type => 'number',
            key => 1,
            title => 'id ключа',
        },
        name => {
            type => 'text',
            required => 1,
            title => 'имя ключа',
        },
        private_key => {
            type => 'text',
            required => 1,
            title => 'приватный ключ',
        },
        public_key => {
            type => 'text',
            title => 'публичный ключ',
        },
        fingerprint => {
            type => 'text',
            required => 1,
            title => 'отпечаток ключа',
        },
    }
}

sub add {
    my $self = shift;
    my %args = (
        name => undef,
        private_key => undef,
        @_,
    );

    $args{fingerprint} ||= $self->make_fingerprint( file_by_string( $args{private_key} ) );

    unless ( $args{fingerprint} ) {
        logger->error("Can't create fingerprint.");
        return undef;
    }
    return $self->SUPER::add( %args );
}

sub make_fingerprint {
    my $self = shift;
    my $file = shift;

    my @ret = `ssh-keygen -l -E MD5 -f $file 2>/dev/null`;

    if ( $? == 0 ) {
        chomp $ret[0];
        $ret[0] =~s/^\d+\s//;
        return $ret[0];
    }
    return undef;
}

sub private_key_file {
    my $self = shift;

    return file_by_string( $self->res->{private_key} );
}

sub generate_key_pair {
    my $self = shift;
    my %args = (
        type => 'ed25519',
        @_,
    );

    my $file = `mktemp -u`;
    chomp($file);

    my @ret = `ssh-keygen -t $args{type} -E MD5 -N '' -C 'Generated by SHM' -f $file 2>/dev/null`;

    unless ( $? == 0 ) {
        logger->warning("Can't generate ssh key pair");
        return undef;
    }

    my $fingerprint = $ret[4];
    chomp $fingerprint;

    my %struct = (
        private_key => read_file( "$file" ),
        public_key => read_file( "$file.pub" ),
        fingerprint => $fingerprint,
    );

    unlink "$file";
    unlink "$file.pub";

    return \%struct;
}

sub list_for_api {
    my $self = shift;
    my %args = (
        @_,
    );

    my @arr = $self->SUPER::list_for_api( %args );
    delete $_->{private_key} for @arr;

    return @arr;
}

1;
